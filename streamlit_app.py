# === app.py ===
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
import pickle
from matplotlib.ticker import FuncFormatter
from pre_processamento import carregar_dados_processados

st.set_page_config(page_title="Predi√ß√£o de Sobreviv√™ncia", layout="wide")

# Navega√ß√£o lateral
opcoes = ['Boas-vindas', 'Sobre o Projeto', 'Processo', 'Previs√£o', 'Dashboard']

pagina = st.sidebar.selectbox('üìå Navegue pelo menu:', opcoes)

# ===========================
# üìå P√°gina de Boas-vindas
# ===========================
if pagina == 'Boas-vindas':
    st.title("üî¨ Predi√ß√£o de Sobreviv√™ncia de Pacientes com C√¢ncer")
    st.markdown("""
    Esta aplica√ß√£o visa prever a **probabilidade de um paciente sobreviver a longo prazo**
    com base em caracter√≠sticas cl√≠nicas e ambientais.  
    Os dados utilizados s√£o **simulados** e representam o per√≠odo de **2015 a 2024**.
    
    A vari√°vel predita √©:
    - **Faixa_Survival_Binaria**: 'Curto Prazo' (‚â§3 anos) ou 'Longo Prazo' (>3 anos).
    """)

# ===========================
# üìå P√°gina Sobre o Projeto
# ===========================

elif pagina == 'Sobre o Projeto':
    st.title("üìö Sobre o Projeto")

    st.markdown("""
    ### üìå Contexto e Objetivos
    Este projeto tem como objetivo prever a **chance de sobreviv√™ncia de pacientes com c√¢ncer** com base em caracter√≠sticas cl√≠nicas, gen√©ticas e ambientais.

    O foco √© identificar, com o aux√≠lio de modelos de aprendizado de m√°quina, **pacientes com maior ou menor probabilidade de sobreviver a longo prazo**.

    ### üóÇÔ∏è Origem dos Dados
    Os dados utilizados s√£o **simulados**, representando pacientes de diversos pa√≠ses no per√≠odo de **2015 a 2024**.

    As vari√°veis incluem:
    - Fatores cl√≠nicos: idade, est√°gio do c√¢ncer, anos de sobreviv√™ncia, custo do tratamento.
    - Fatores de risco: polui√ß√£o do ar, tabagismo, obesidade, √°lcool, risco gen√©tico.
    - Indicador de gravidade: `Target_Severity_Score`.

    ### üõ†Ô∏è Pr√©-processamento dos Dados
    O tratamento incluiu:
    - Convers√£o de vari√°veis categ√≥ricas (como `Cancer_Stage`) em forma num√©rica.
    - Normaliza√ß√£o de vari√°veis cont√≠nuas para melhorar o desempenho dos algoritmos.
    - Cria√ß√£o da vari√°vel-alvo bin√°ria `Faixa_Survival_Binaria` (Longo Prazo / Curto Prazo).
    - Divis√£o dos dados em treino/teste e valida√ß√£o cruzada.

    ### üß∞ Pacotes Utilizados
    - **streamlit**: constru√ß√£o da interface interativa.
    - **pandas**: manipula√ß√£o de dados tabulares.
    - **numpy**: suporte a opera√ß√µes matem√°ticas e vetoriza√ß√£o.
    - **matplotlib & seaborn**: cria√ß√£o de visualiza√ß√µes e gr√°ficos.
    - **scikit-learn**: constru√ß√£o e avalia√ß√£o dos modelos de machine learning.
    - **joblib**: salvamento e carregamento do modelo treinado (.pkl).
    - **requests**: download de arquivos hospedados remotamente (como o modelo).

    ---
    Este app foi desenvolvido como um exerc√≠cio de aplica√ß√£o pr√°tica de **Machine Learning interpret√°vel e acess√≠vel**.
    """)


# ===========================
# ‚öôÔ∏è P√°gina de Processo
# ===========================
elif pagina == 'Processo':
    st.title("‚öôÔ∏è Processo e Justificativas")
    st.markdown("""
    - **Pr√©-processamento**: Limpeza de dados, categoriza√ß√£o e dummifica√ß√£o.
    - **Modelos testados**: Regress√£o Log√≠stica, √Årvores, KNN, Random Forest, etc.
    - **Modelo escolhido**: O melhor desempenho foi com **BaggingClassifier**, conforme a m√©trica F1-score e Acur√°cia Balanceada.
    """)

# ===========================
# üîÆ P√°gina de Previs√£o
# ===========================
elif pagina == 'Previs√£o':
    # st.set_page_config(
    #     page_title="Previs√£o de Progn√≥stico de C√¢ncer",
    #     page_icon="üîÆ",
    #     layout="wide"
    # )

    st.title("üîÆ Previs√£o de Progn√≥stico de C√¢ncer")
    st.markdown("Preencha os dados do paciente abaixo para obter uma previs√£o sobre a gravidade do progn√≥stico.")

    # --- Carregamento do Modelo ---
    @st.cache_resource
    def carregar_modelo():
        try:
            with open('modelo_cancer.pkl', 'rb') as file:
                return pickle.load(file)
        except FileNotFoundError:
            return None
            

    modelo = carregar_modelo()

    if modelo is None:
        st.error("‚ùå Arquivo do modelo n√£o encontrado! Certifique-se de que `modelo_cancer.pkl` est√° no mesmo diret√≥rio do app.")
    else:
        # --- Entrada de Dados ---
        st.divider()
        st.subheader("Por favor, insira os dados do paciente:")

        col1, col2 = st.columns(2)

        with col1:
            age = st.slider("Idade do Paciente", 20, 90, 55)
            gender = st.selectbox("G√™nero", ["Male", "Female"])
            treatment_cost = st.number_input("Custo Estimado do Tratamento (USD)", min_value=1000, max_value=200000, value=50000, step=1000)
            cancer_stage_text = st.select_slider(
                "Est√°gio do C√¢ncer",
                options=['Stage 0', 'Stage I', 'Stage II', 'Stage III', 'Stage IV'],
                value='Stage II'
            )

        with col2:
            genetic_risk = st.slider("Risco Gen√©tico (0-10)", 0, 10, 5)
            air_pollution = st.slider("Exposi√ß√£o √† Polui√ß√£o do Ar (0-10)", 0, 10, 5)
            alcohol_use = st.slider("Consumo de √Ålcool (0-10)", 0, 10, 5)
            smoking = st.slider("N√≠vel de Tabagismo (0-10)", 0, 10, 5)
            obesity_level = st.slider("N√≠vel de Obesidade (0-10)", 0, 10, 5)

        st.divider()

        if st.button("üîç Realizar Previs√£o", type="primary", use_container_width=True):
            stage_map = {'Stage 0': 0, 'Stage I': 1, 'Stage II': 2, 'Stage III': 3, 'Stage IV': 4}
            cancer_stage_ordinal = stage_map[cancer_stage_text]

            input_data = pd.DataFrame({
                'Age': [age],
                'Treatment_Cost_USD': [treatment_cost],
                'Genetic_Risk': [genetic_risk],
                'Air_Pollution': [air_pollution],
                'Alcohol_Use': [alcohol_use],
                'Smoking': [smoking],
                'Obesity_Level': [obesity_level],
                'Cancer_Stage_Ordinal': [cancer_stage_ordinal],
                'Gender': [gender]
            })

            st.write("‚öôÔ∏è **Dados de entrada para o modelo:**")
            st.dataframe(input_data)

            # Realiza previs√£o
            predicao = modelo.predict(input_data)[0]
            probabilidades = modelo.predict_proba(input_data)

            prob_df = pd.DataFrame(probabilidades, columns=modelo.classes_, index=["Probabilidade"])

            # Resultado
            st.write("---")
            st.subheader("üìà Resultado da Previs√£o")

            if predicao == 'Alta Gravidade':
                st.error(f"**Progn√≥stico Previsto:** {predicao}")
            else:
                st.success(f"**Progn√≥stico Previsto:** {predicao}")

            st.write("O gr√°fico abaixo mostra a confian√ßa do modelo em cada classe:")
            st.bar_chart(prob_df.T)

            st.info("""
            **Aviso Importante:** O modelo foi treinado com dados sint√©ticos e apresenta desempenho elevado.
            Os resultados s√£o ilustrativos e n√£o devem ser usados para decis√µes cl√≠nicas.
            """)


# ===========================
# üìä P√°gina de Dashboard
# ===========================
elif pagina == 'Dashboard':
    st.title("üìä Dashboard - Dados Tratados")

    url = 'https://raw.githubusercontent.com/NandoBispo/global-cancer-patients/main/dados/global_cancer_patients_2015_2024.csv'
    df = pd.read_csv(url)

    col1, col2, col3 = st.columns(3)

    st.markdown('---')

    regiao = col1.selectbox("Regi√£o", df['Country_Region'].unique())
    sexo = col2.selectbox("Sexo", ['Masculino', 'Feminino'])
    ano = col3.selectbox("Ano", list(range(2015, 2025)))

    sexo = 'Male' if sexo == 'Masculino' else 'Female'

    filtro_regiao = df['Country_Region'] == regiao
    filtro_sexo = df['Gender'] == sexo
    filtro_ano = df['Year'] == ano

    dados_filtrados = df.loc[filtro_regiao & filtro_sexo & filtro_ano]

    col1, col2 = st.columns([1, 3])

    col1.metric('Idade M√©dia', round(dados_filtrados['Age'].mean(), 1))
    col1.metric('Tempo M√©dio de Vida (em Anos)', round(dados_filtrados['Survival_Years'].mean(), 1))
    col1.metric('Custo M√©dio do Tratamento (USD)',
                f"${round(dados_filtrados['Treatment_Cost_USD'].mean(), 2):,.2f}")


    # üîç Distribui√ß√£o dos Est√°gios do C√¢ncer
    # st.subheader("üìä Distribui√ß√£o dos Est√°gios do C√¢ncer")

    # if not dados_filtrados.empty:
    #     distribuicao_estagios = (
    #         dados_filtrados['Cancer_Stage']
    #         .value_counts(normalize=True)
    #         .sort_index()
    #     )

    #     for estagio, proporcao in distribuicao_estagios.items():
    #         st.write(f"- **{estagio}**: {proporcao:.2%}")
    # else:
    #     st.warning("Nenhum dado dispon√≠vel para os filtros selecionados.")

    if not dados_filtrados.empty:
        distribuicao_estagios = (
            dados_filtrados['Cancer_Stage']
            .value_counts(normalize=True)
            .sort_index()
        )

        col1.markdown("#### üìä Est√°gios do C√¢ncer")
        for estagio, proporcao in distribuicao_estagios.items():
            col1.markdown(f"- **{estagio}**: {proporcao:.2%}")
    else:
        col1.warning("Nenhum dado dispon√≠vel para os filtros selecionados.")

    # üéØ Gr√°fico de dispers√£o: Anos de Sobreviv√™ncia vs Custo
    fig = sns.scatterplot(data=dados_filtrados,
                          x='Survival_Years',
                          y='Treatment_Cost_USD')
                        #   hue='Cancer_Stage')
    plt.xlabel('Anos de Sobreviv√™ncia')
    plt.ylabel('Custo do Tratamento (USD)')
    plt.title('Anos de Sobreviv√™ncia X Custo do Tratamento')
    plt.ticklabel_format(style='plain', axis='y')  # evita nota√ß√£o cient√≠fica
    plt.gca().get_yaxis().set_major_formatter(
    plt.matplotlib.ticker.FuncFormatter(lambda x, _: f'{int(x):,}'.replace(",", ".")))  # separador de milhar

    col2.pyplot(fig.get_figure())

    st.markdown('---')

