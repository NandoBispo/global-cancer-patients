# === app.py ===
import streamlit as st
# import sklearn
# st.write(f"Vers√£o do scikit-learn no ambiente Streamlit: {sklearn.__version__}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# import joblib
import pickle
from matplotlib.ticker import FuncFormatter
from pre_processamento import carregar_dados_processados

import numpy as np  # <- Essencial para corrigir o erro que voc√™ teve

st.set_page_config(page_title="Predi√ß√£o de Sobreviv√™ncia", layout="wide")


# Navega√ß√£o lateral
opcoes = ['Boas-vindas', 'Sobre o Projeto', 'Previs√£o', 'Dashboard']

pagina = st.sidebar.selectbox('üìå Navegue pelo menu:', opcoes)

# ===========================
# üìå P√°gina de Boas-vindas
# ===========================
if pagina == 'Boas-vindas':
    st.title("üî¨ Predi√ß√£o de Gravidade do Progn√≥stico para Pacientes com C√¢ncer")
    
    st.markdown("""
    Bem-vindo(a) a esta aplica√ß√£o interativa que utiliza t√©cnicas de **Machine Learning** para prever o **n√≠vel de gravidade do progn√≥stico** em pacientes diagnosticados com c√¢ncer.  
    Aqui, voc√™ pode explorar como fatores cl√≠nicos, ambientais e demogr√°ficos impactam na severidade da doen√ßa.

    ---
    ### Sobre o Modelo
    O modelo foi treinado em dados simulados abrangendo pacientes de diversos pa√≠ses, com registros do per√≠odo entre **2015 e 2024**.  
    A vari√°vel alvo predita √© o progn√≥stico categ√≥rico:
    - **Alta Gravidade:** pacientes com maior risco e severidade da doen√ßa.
    - **Baixa Gravidade:** pacientes com menor risco, progn√≥stico mais favor√°vel.

    ---
    ### Quais dados s√£o usados para a previs√£o?
    O modelo considera informa√ß√µes como:
    - Idade e g√™nero do paciente
    - Tipo e est√°gio do c√¢ncer
    - Fatores de risco: tabagismo, consumo de √°lcool, obesidade, exposi√ß√£o √† polui√ß√£o do ar, risco gen√©tico, entre outros
    - Custo estimado do tratamento

    ---
    ### Para que serve esta aplica√ß√£o?
    - Demonstrar o potencial do aprendizado de m√°quina na √°rea da sa√∫de
    - Auxiliar na compreens√£o dos fatores que influenciam a gravidade do c√¢ncer
    - Servir como base para desenvolvimento e experimenta√ß√£o em projetos educacionais e de pesquisa

    ---
    ### Importante
    Este modelo √© constru√≠do com **dados simulados** e serve para fins educativos e ilustrativos.  
    N√£o deve ser utilizado para decis√µes m√©dicas ou cl√≠nicas reais.

    ---
    Aproveite para navegar pelas abas e conhecer melhor o projeto, explorar os dados, realizar previs√µes e entender a metodologia aplicada!
    """)

# ===========================
# üìå P√°gina Sobre o Projeto
# ===========================

elif pagina == 'Sobre o Projeto':
    st.title("üìö Sobre o Projeto")

    st.markdown("""
    ### üìå Contexto e Objetivos
    O c√¢ncer √© uma doen√ßa complexa que representa um grande desafio para a sa√∫de p√∫blica global. Este projeto visa desenvolver um modelo preditivo de aprendizado de m√°quina capaz de **estimular a previs√£o do progn√≥stico de pacientes com c√¢ncer**, classificando-os em "Alta Gravidade" ou "Baixa Gravidade" com base em uma combina√ß√£o de caracter√≠sticas cl√≠nicas, demogr√°ficas e ambientais.

    O objetivo √© fornecer uma ferramenta que auxilie na identifica√ß√£o precoce de pacientes com maior risco, para suportar decis√µes cl√≠nicas e estrat√©gias de tratamento, com a ressalva de que o modelo √© treinado em dados simulados e serve principalmente para fins educacionais.

    ### üóÇÔ∏è Origem e Descri√ß√£o dos Dados
    Os dados utilizados foram obtidos a partir do reposit√≥rio p√∫blico no Kaggle:
    [Global Cancer Patients 2015-2024](https://www.kaggle.com/datasets/zahidmughal2343/global-cancer-patients-2015-2024)

    Este conjunto cont√©m informa√ß√µes simuladas de pacientes diagnosticados com diferentes tipos de c√¢ncer entre os anos de 2015 e 2024, abrangendo diversas regi√µes do mundo.

    As vari√°veis principais incluem:

    - **Idade:** idade do paciente, variando entre 20 e 90 anos.
    - **G√™nero:** masculino, feminino ou outro.
    - **Pa√≠s/Regi√£o:** local de origem do paciente.
    - **Tipo de C√¢ncer:** diferentes categorias de c√¢ncer (ex.: mama, pulm√£o, c√≥lon).
    - **Est√°gio do C√¢ncer:** classifica√ß√£o do est√°gio da doen√ßa, do 0 ao IV.
    - **Fatores de Risco:** n√≠veis de risco gen√©tico, exposi√ß√£o √† polui√ß√£o do ar, consumo de √°lcool, tabagismo, obesidade, entre outros.
    - **Custo do Tratamento:** estimativa do custo em d√≥lares para o tratamento do c√¢ncer.
    - **Anos de Sobreviv√™ncia:** tempo em anos desde o diagn√≥stico.
    - **Pontua√ß√£o de Gravidade (`Target_Severity_Score`):** um escore composto que sintetiza a severidade do c√¢ncer para cada paciente.

    ### üõ†Ô∏è Pr√©-processamento dos Dados e Engenharia da Vari√°vel-Alvo
    Para viabilizar a modelagem, foi realizada a seguinte prepara√ß√£o dos dados:

    - **Engenharia da vari√°vel alvo:** a vari√°vel cont√≠nua `Target_Severity_Score` foi transformada em uma vari√°vel categ√≥rica bin√°ria chamada `Prognostico`, dividindo os pacientes em duas classes:
      - **Alta Gravidade:** pacientes com escore acima da mediana.
      - **Baixa Gravidade:** pacientes com escore igual ou abaixo da mediana.

    - **Mapeamento do Est√°gio do C√¢ncer:** os est√°gios textuais (`Stage 0` a `Stage IV`) foram convertidos em valores ordinais de 0 a 4 para facilitar o processamento.

    - **Remo√ß√£o de vari√°veis redundantes ou que gerariam vazamento de dados:** vari√°veis como `Target_Severity_Score`, `Survival_Years`, `Prognostico` e `Cancer_Stage` foram exclu√≠das das features preditoras.

    - **Tratamento das vari√°veis categ√≥ricas e num√©ricas:** 
      - Vari√°veis num√©ricas foram padronizadas usando `StandardScaler`.
      - Vari√°veis categ√≥ricas foram codificadas via `OneHotEncoder` com tratamento para valores desconhecidos em dados novos.

    - **Divis√£o e valida√ß√£o:** os dados foram utilizados com valida√ß√£o cruzada estratificada para garantir a robustez das m√©tricas e evitar overfitting.

    ### ü§ñ Metodologia e Sele√ß√£o de Modelos
    Diversos algoritmos de classifica√ß√£o foram avaliados com o objetivo de encontrar o modelo que melhor balanceasse desempenho e interpretabilidade:

    - Regress√£o Log√≠stica
    - √Årvore de Decis√£o
    - K-Nearest Neighbors (KNN)
    - Bagging Classifier
    - Random Forest

    Os modelos foram avaliados por m√©tricas importantes como F1-Score (com foco na classe "Alta Gravidade"), Acur√°cia Balanceada, Precis√£o, Revoca√ß√£o e AUC ROC.

    O modelo final escolhido foi o que apresentou o melhor desempenho no F1-Score, garantindo um bom equil√≠brio entre precis√£o e sensibilidade para detectar pacientes de alto risco.

    ### üß∞ Pacotes e Ferramentas Utilizadas
    Para a constru√ß√£o deste projeto foram usados:

    - **streamlit:** desenvolvimento da interface web interativa.
    - **pandas & numpy:** manipula√ß√£o e an√°lise dos dados.
    - **scikit-learn:** pr√©-processamento, constru√ß√£o e valida√ß√£o dos modelos de machine learning.
    - **joblib & pickle:** serializa√ß√£o e carregamento do modelo final.
    - **matplotlib & seaborn:** visualiza√ß√µes explorat√≥rias e gr√°ficos.
    - **kagglehub:** download automatizado dos dados do Kaggle.
    - **ydata-profiling:** gera√ß√£o de relat√≥rios explorat√≥rios dos dados.

    ---

    Este projeto √© uma demonstra√ß√£o pr√°tica do uso de aprendizado de m√°quina para an√°lise preditiva na √°rea da sa√∫de, com foco em cancerologia. Ressaltamos que, apesar do rigor t√©cnico, o modelo aqui apresentado n√£o deve ser utilizado para decis√µes cl√≠nicas reais, dada a natureza simulada dos dados e o car√°ter educativo da aplica√ß√£o.

    """)


elif pagina == 'Previs√£o':

    @st.cache_data
    def carregar_valores_unicos():
        url = 'https://raw.githubusercontent.com/NandoBispo/global-cancer-patients/main/dados/global_cancer_patients_2015_2024.csv'
        df_dados = pd.read_csv(url)

        traducao_cancer = {
            "Breast": "Mama",
            "Lung": "Pulm√£o",
            "Colon": "C√≥lon",
            "Prostate": "Pr√≥stata",
            "Liver": "F√≠gado",
            "Stomach": "Est√¥mago",
            "Cervical": "Colo do √∫tero",
            "Pancreatic": "P√¢ncreas",
            "Ovarian": "Ov√°rio",
            "Esophageal": "Es√¥fago"
        }

        df_dados['Cancer_Type_PT'] = df_dados['Cancer_Type'].map(traducao_cancer)

        return {
            'countries': sorted(df_dados['Country_Region'].dropna().unique().tolist()),
            'cancers_en': sorted(df_dados['Cancer_Type'].dropna().unique().tolist()),
            'cancers_pt': sorted(df_dados['Cancer_Type_PT'].dropna().unique().tolist()),
            'anos': sorted(df_dados['Year'].dropna().unique().astype(int).tolist()),
            'mapa_cancer': dict(zip(df_dados['Cancer_Type_PT'], df_dados['Cancer_Type']))
        }

    valores = carregar_valores_unicos()

    st.title("üîÆ Previs√£o de Progn√≥stico de C√¢ncer")
    st.markdown("Preencha os dados do paciente abaixo para obter uma previs√£o sobre a gravidade do progn√≥stico.")

    @st.cache_resource
    def carregar_modelo():
        try:
            with open("modelo_cancer.pkl", "rb") as file:
                return pickle.load(file)
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar o modelo: {e}")
            return None

    modelo = carregar_modelo()

    if modelo is None:
        st.error("‚ùå Arquivo do modelo n√£o encontrado! Certifique-se de que `modelo_cancer.pkl` est√° no mesmo diret√≥rio do app.")
    else:
        st.divider()
        st.subheader("üìù Dados do Paciente")

        col1, col2, col3 = st.columns(3)

        with col1:
            age = st.slider("Idade do Paciente", 20, 90, 55)
            gender_pt = st.selectbox("G√™nero", ["Masculino", "Feminino"])
            gender = 'Male' if gender_pt == 'Masculino' else 'Female'
            country_region = st.selectbox("Pa√≠s/Regi√£o", valores['countries'])

        with col2:
            treatment_cost = st.number_input("Custo Estimado do Tratamento (USD)", min_value=1000, max_value=200000, value=50000, step=1000, format="%d")

            cancer_type_pt = st.selectbox("Tipo de C√¢ncer", valores['cancers_pt'])
            cancer_type = valores['mapa_cancer'][cancer_type_pt]

            year = st.selectbox("Ano do Diagn√≥stico", valores['anos'])

        with col3:
            cancer_stage_text = st.select_slider(
                "Est√°gio do C√¢ncer",
                options=['Stage 0', 'Stage I', 'Stage II', 'Stage III', 'Stage IV'],
                value='Stage II'
            )
            genetic_risk = st.slider("Risco Gen√©tico (0-10)", 0, 10, 5)
            air_pollution = st.slider("Polui√ß√£o do Ar (0-10)", 0, 10, 5)
            alcohol_use = st.slider("Consumo de √Ålcool (0-10)", 0, 10, 5)
            smoking = st.slider("N√≠vel de Tabagismo (0-10)", 0, 10, 5)
            obesity_level = st.slider("N√≠vel de Obesidade (0-10)", 0, 10, 5)

        st.divider()

        if st.button("üîç Realizar Previs√£o", type="primary", use_container_width=True):
            stage_map = {'Stage 0': 0, 'Stage I': 1, 'Stage II': 2, 'Stage III': 3, 'Stage IV': 4}
            cancer_stage_ordinal = stage_map[cancer_stage_text]

            input_data = pd.DataFrame({
                'Age': [age],
                'Treatment_Cost_USD': [treatment_cost],
                'Genetic_Risk': [genetic_risk],
                'Air_Pollution': [air_pollution],
                'Alcohol_Use': [alcohol_use],
                'Smoking': [smoking],
                'Obesity_Level': [obesity_level],
                'Cancer_Stage_Ordinal': [cancer_stage_ordinal],
                'Gender': [gender],
                'Country_Region': [country_region],
                'Cancer_Type': [cancer_type],
                'Year': [year]
            })

            st.write("‚öôÔ∏è **Visualiza√ß√£o dos dados de entrada:**")
            input_display = input_data.copy()
            input_display['Treatment_Cost_USD'] = input_display['Treatment_Cost_USD'].apply(lambda x: f"${x:,.0f}".replace(",", "."))
            input_display['Gender'] = gender_pt
            input_display['Cancer_Type'] = cancer_type_pt
            st.dataframe(input_display)

            try:
                predicao = modelo.predict(input_data)[0]
                probabilidades = modelo.predict_proba(input_data)
                prob_df = pd.DataFrame(probabilidades, columns=modelo.classes_, index=["Probabilidade"])

                st.write("---")
                st.subheader("üìà Resultado da Previs√£o")

                if predicao == 'Alta Gravidade':
                    st.error(f"**Progn√≥stico Previsto:** {predicao}")
                else:
                    st.success(f"**Progn√≥stico Previsto:** {predicao}")

                st.write("O gr√°fico abaixo mostra a confian√ßa do modelo em cada classe:")
                st.bar_chart(prob_df.T)

                st.info("""
                **Aviso Importante:** O modelo foi treinado com dados sint√©ticos e apresenta desempenho elevado.
                Os resultados s√£o ilustrativos e n√£o devem ser usados para decis√µes cl√≠nicas.
                """)
            except Exception as e:
                st.error(f"‚ùå Erro durante a previs√£o: {e}")




# ===========================
# üìä P√°gina de Dashboard
# ===========================
elif pagina == 'Dashboard':
    st.title("üìä Dashboard Interativo - An√°lise dos Pacientes")

    # Carregamento dos dados
    url = 'https://raw.githubusercontent.com/NandoBispo/global-cancer-patients/main/dados/global_cancer_patients_2015_2024.csv'
    df = pd.read_csv(url)

       # Dicion√°rio de tradu√ß√£o para os tipos de c√¢ncer
    traducao_cancer = {
        "Lung": "Pulm√£o",
        "Breast": "Mama",
        "Colon": "C√≥lon",
        "Prostate": "Pr√≥stata",
        "Stomach": "Est√¥mago",
        "Liver": "F√≠gado",
        "Pancreatic": "P√¢ncreas",
        "Leukemia": "Leucemia",
        "Lymphoma": "Linfoma",
        "Skin": "Pele",
        "Other": "Outro"
    }

    tipos_originais = sorted(df['Cancer_Type'].dropna().unique())
    tipos_traduzidos = [traducao_cancer.get(c, c) for c in tipos_originais]

    # ========= Filtros =========
    st.markdown("### üîç Filtros Interativos")
    col1, col2, col3, col4 = st.columns(4)

    regiao = col1.selectbox("üåç Regi√£o", sorted(df['Country_Region'].dropna().unique()))
    sexo = col2.selectbox("üë§ Sexo", ['Masculino', 'Feminino'])
    ano = col3.selectbox("üìÖ Ano", sorted(df['Year'].dropna().unique()))
    # tipo_cancer = col4.selectbox("üß¨ Tipo de C√¢ncer", sorted(df['Cancer_Type'].dropna().unique()))
    tipo_cancer_traduzido = col4.selectbox("üß¨ Tipo de C√¢ncer", tipos_traduzidos)

    sexo = 'Male' if sexo == 'Masculino' else 'Female'
    tipo_cancer = [k for k, v in traducao_cancer.items() if v == tipo_cancer_traduzido]
    tipo_cancer = tipo_cancer[0] if tipo_cancer else tipo_cancer_traduzido

    # ========= Aplicar Filtros =========
    dados_filtrados = df[
        (df['Country_Region'] == regiao) &
        (df['Gender'] == sexo) &
        (df['Year'] == ano) &
        (df['Cancer_Type'] == tipo_cancer)
    ]

    if dados_filtrados.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para os filtros selecionados.")
    else:
        # ========= M√©tricas =========
        st.markdown("### üìà M√©tricas Resumidas")
        col1, col2, col3 = st.columns(3)
        col1.metric('üßì Idade M√©dia', round(dados_filtrados['Age'].mean(), 1))
        col2.metric('üíµ Custo M√©dio (USD)', f"${round(dados_filtrados['Treatment_Cost_USD'].mean(), 2):,}".replace(",", "."))
        col3.metric('‚ù§Ô∏è Sobreviv√™ncia M√©dia (anos)', round(dados_filtrados['Survival_Years'].mean(), 1))

        st.divider()

        # ========= Est√°gios do C√¢ncer =========
        with st.expander("üìä Distribui√ß√£o dos Est√°gios do C√¢ncer"):
            ordem_correta = ['Stage 0', 'Stage I', 'Stage II', 'Stage III', 'Stage IV']
            distribuicao_estagios = (
                dados_filtrados['Cancer_Stage']
                .value_counts(normalize=True)
                .reindex(ordem_correta)
                .dropna()
            )
            for estagio, proporcao in distribuicao_estagios.items():
                st.markdown(f"- **{estagio}**: {proporcao:.2%}")

        # ========= Distribui√ß√£o de Idade =========
        with st.expander("üìà Distribui√ß√£o da Idade"):
            fig1 = plt.figure(figsize=(6, 4))
            ax1 = sns.histplot(dados_filtrados['Age'], bins=15, kde=True, color="teal")
            ax1.yaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{int(x):,}'.replace(",", ".")))
            plt.title("Distribui√ß√£o de Idade dos Pacientes")
            plt.xlabel("Idade")
            plt.ylabel("Frequ√™ncia")
            st.pyplot(fig1)

        # ========= Boxplot do Custo =========
        with st.expander("üíµ Custo por Est√°gio do C√¢ncer"):
            fig2 = plt.figure(figsize=(6, 4))
            ax2 = sns.boxplot(data=dados_filtrados, x="Cancer_Stage", y="Treatment_Cost_USD", order=ordem_correta, palette="Set2")
            ax2.yaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{int(x):,}'.replace(",", ".")))
            plt.title("Custo do Tratamento por Est√°gio")
            plt.xlabel("Est√°gio do C√¢ncer")
            plt.ylabel("Custo (USD)")
            st.pyplot(fig2)

        # ========= Dispers√£o Sobreviv√™ncia x Custo =========
        with st.expander("üìâ Rela√ß√£o entre Sobreviv√™ncia e Custo"):
            fig3 = plt.figure(figsize=(6, 4))
            ax3 = sns.scatterplot(data=dados_filtrados, x='Survival_Years', y='Treatment_Cost_USD', hue='Cancer_Stage', palette='muted')
            ax3.yaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{int(x):,}'.replace(",", ".")))
            plt.title('Anos de Sobreviv√™ncia X Custo do Tratamento')
            plt.xlabel("Anos de Sobreviv√™ncia")
            plt.ylabel("Custo (USD)")
            st.pyplot(fig3)

        # ========= Heatmap de Correla√ß√£o =========
        with st.expander("üî¨ Mapa de Correla√ß√£o entre Vari√°veis Num√©ricas"):
            numeric_cols = dados_filtrados.select_dtypes(include=np.number).drop(columns=["Year"], errors="ignore")
            corr = numeric_cols.corr()
            fig4 = plt.figure(figsize=(6, 4))
            sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
            plt.title("Correla√ß√£o entre Vari√°veis Num√©ricas")
            st.pyplot(fig4)

        st.markdown("---")
        st.success("üîé Explore diferentes filtros para gerar insights sobre a popula√ß√£o de pacientes.")
